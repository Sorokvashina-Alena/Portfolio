import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ====== –ü–ê–õ–ò–¢–†–ê ======
palette_custom = ["#dad7cd", "#a3b18a", "#588157", "#3a5a40", "#344e41"]

# ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =====
df = pd.read_csv("webinar_user_events.csv", sep=";")
df['created_at'] = pd.to_datetime(df['created_at'], format="%d.%m.%Y %H:%M")

# ===== –í–û–†–û–ù–ö–ê =====
total_users = df['user_id'].nunique()
entered_bot = df[df['action'] == 'enter_bot']['user_id'].nunique()
entered_webinar = df[df['action'] == 'enter_webinar_room']['user_id'].nunique()
made_order = df[df['action'] == 'make_order']['user_id'].nunique()

print("==== –í–û–†–û–ù–ö–ê ====")
print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
print(f"–ó–∞—à–ª–∏ –≤ –±–æ—Ç–∞: {entered_bot} ({entered_bot / total_users:.1%})")
print(f"–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –≤–µ–±–∏–Ω–∞—Ä—É: {entered_webinar} ({entered_webinar / entered_bot:.1%})")
print(f"–û—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É: {made_order} ({made_order / entered_webinar:.1%})")

# ===== –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –í–û–†–û–ù–ö–ò =====
stages = ['–í–æ—à–ª–∏ –≤ –±–æ—Ç–∞', '–ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å', '–û—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É']
values = [entered_bot, entered_webinar, made_order]
conversion = [100, entered_webinar / entered_bot * 100, made_order / entered_webinar * 100]

plt.figure(figsize=(8, 5))
sns.barplot(x=stages, y=conversion, palette=palette_custom[:3])
plt.title('–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —ç—Ç–∞–ø–∞–º –≤–æ—Ä–æ–Ω–∫–∏')
plt.ylabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)')
for i, val in enumerate(values):
    plt.text(i, conversion[i] / 2, f'n={val}', ha='center', color='black', weight='bold')
plt.tight_layout()
plt.show()

# ===== –ü–û–î–ì–û–¢–û–í–ö–ê –°–ï–°–°–ò–ô =====
webinar_start = df[df['action'] == 'enter_webinar_room']['created_at'].min()

user_stats = []
for user_id in df['user_id'].unique():
    user_data = df[df['user_id'] == user_id]
    if {'enter_webinar_room', 'leave_webinar_room'}.issubset(set(user_data['action'])):
        enter = user_data[user_data['action'] == 'enter_webinar_room']['created_at'].min()
        leave = user_data[user_data['action'] == 'leave_webinar_room']['created_at'].max()
        duration = (leave - enter).total_seconds() / 60
        order = 1 if 'make_order' in user_data['action'].values else 0
        user_stats.append({
            'user_id': user_id,
            'duration_min': duration,
            'made_order': order
        })

webinar_time = pd.DataFrame(user_stats)

# ===== –ö–û–ù–í–ï–†–°–ò–Ø –ü–û –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò =====
bins = [0, 5, 10, 15, 20, 25, 30, 35, 40, 50, 60, 90]
labels = ["0‚Äì5", "5‚Äì10", "10‚Äì15", "15‚Äì20", "20‚Äì25", "25‚Äì30",
          "30‚Äì35", "35‚Äì40", "40‚Äì50", "50‚Äì60", "60‚Äì90"]

webinar_time['duration_group'] = pd.cut(webinar_time['duration_min'], bins=bins, labels=labels, right=False)
grouped = webinar_time.groupby('duration_group')['made_order'].agg(['count', 'sum'])
grouped['conversion (%)'] = (grouped['sum'] / grouped['count'] * 100).round(2)
grouped = grouped.rename(columns={'count': 'Users', 'sum': 'Orders'})

print("\nüìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è:")
print(grouped)

from matplotlib.colors import LinearSegmentedColormap

# –ì—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ ‚Äî –æ—Ç min –∫ max
colorscale = LinearSegmentedColormap.from_list("custom_green", palette_custom)

norm_values = (grouped["conversion (%)"] - grouped["conversion (%)"].min()) / (
    grouped["conversion (%)"].max() - grouped["conversion (%)"].min()
)
colors = [colorscale(val) for val in norm_values.fillna(0)]  # –∑–∞—â–∏—Ç–∞ –æ—Ç NaN

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plt.figure(figsize=(10, 6))
bars = sns.barplot(x=grouped.index, y=grouped['conversion (%)'], palette=colors)

plt.title('üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞—è–≤–∫—É –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è', fontsize=13)
plt.xlabel('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è (–º–∏–Ω.)')
plt.ylabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)')

# –ü–æ–¥–ø–∏—Å–∏
for i, v in enumerate(grouped['conversion (%)']):
    bars.text(i, v + 0.3, f"{v:.1f}%", ha='center', fontsize=9)

plt.xticks(rotation=30)
plt.tight_layout()
plt.show()

# ===== –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –ü–û –ü–û–í–ï–î–ï–ù–ò–Æ =====
def behavior_segment(row):
    if row['duration_min'] < 5:
        return '–û—Ç–æ—à—ë–ª —Å—Ä–∞–∑—É (<5 –º–∏–Ω)'
    elif row['duration_min'] < 30:
        return '–£—à—ë–ª –¥–æ –æ—Ñ—Ñ–µ—Ä–∞ (<30 –º–∏–Ω)'
    elif row['duration_min'] >= 40:
        return '–î–æ—Å–∏–¥–µ–ª –¥–æ –∫–æ–Ω—Ü–∞ (40+ –º–∏–Ω)'
    else:
        return '–°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å (30‚Äì40 –º–∏–Ω)'

webinar_time['segment'] = webinar_time.apply(behavior_segment, axis=1)

behavior_summary = webinar_time.groupby('segment').agg(
    Users=('user_id', 'count'),
    Orders=('made_order', 'sum')
).sort_values(by='Users', ascending=False)

behavior_summary['conversion (%)'] = (behavior_summary['Orders'] / behavior_summary['Users'] * 100).round(2)
behavior_summary['percent_of_total'] = (behavior_summary['Users'] / webinar_time.shape[0] * 100).round(1)

print("\nüìä –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n")
print(behavior_summary)

plt.figure(figsize=(10, 6))
sns.barplot(x=behavior_summary.index, y=behavior_summary['Users'], palette=palette_custom)
plt.title('–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é')
plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
plt.xticks(rotation=20)
plt.tight_layout()
plt.show()

# ===== –ü–û–í–¢–û–†–ù–´–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====
enter_counts = df[df['action'] == 'enter_webinar_room'].groupby('user_id').size().reset_index(name='enter_count')
webinar_time = webinar_time.merge(enter_counts, on='user_id', how='left')
webinar_time['multi_attempt'] = webinar_time['enter_count'] > 1

multi_summary = webinar_time.groupby('multi_attempt').agg(
    Users=('user_id', 'count'),
    Orders=('made_order', 'sum')
).reset_index()
multi_summary['conversion (%)'] = (multi_summary['Orders'] / multi_summary['Users'] * 100).round(2)
multi_summary['group_label'] = multi_summary['multi_attempt'].map({
    True: '–ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
    False: '–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
})

print("\nüîÅ –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:\n")
print(multi_summary[['group_label', 'Users', 'conversion (%)']].rename(columns={'group_label': '–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'}))

plt.figure(figsize=(8, 5))
sns.barplot(data=multi_summary, x='group_label', y='conversion (%)', palette=palette_custom[:2])
plt.title('–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π')
plt.xlabel('–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
plt.ylabel('–ö–æ–Ω–≤–µ—Ä—Å–∏—è (%)')
for i, val in enumerate(multi_summary['conversion (%)']):
    plt.text(i, val + 0.5, f"{val:.1f}%", ha='center', fontsize=11)
plt.tight_layout()
plt.show()

# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò: Retention –∏ –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ 40-–π –º–∏–Ω—É—Ç—ã =====
filtered_webinar_time = webinar_time[webinar_time['duration_min'] <= 120].copy()

# RETENTION CURVE
retention_curve = {}
for minute in range(0, 121):
    remained = (filtered_webinar_time['duration_min'] >= minute).sum()
    retention_curve[minute] = remained

retention_df = pd.DataFrame.from_dict(retention_curve, orient="index", columns=["remained"])
retention_df['retention_%'] = retention_df['remained'] / retention_df['remained'].iloc[0] * 100
retention_df['dropoff_%'] = 100 - retention_df['retention_%']
retention_df.index.name = 'minute'

dropoff_40 = retention_df.loc[40, 'dropoff_%']

plt.figure(figsize=(10, 5))
plt.plot(retention_df.index, retention_df['dropoff_%'], color=palette_custom[3], label='–û—Ç—Ç–æ–∫ (%)')
plt.axvline(40, color=palette_custom[4], linestyle='--', label='40 –º–∏–Ω ‚Äì –æ—Ñ—Ñ–µ—Ä')
plt.title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –æ—Ç—Ç–æ–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–¥–æ 120 –º–∏–Ω)')
plt.xlabel('–ú–∏–Ω—É—Ç—ã —É—á–∞—Å—Ç–∏—è')
plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç —É—à–µ–¥—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (%)')
plt.xlim(0, 120)
plt.ylim(0, 100)
plt.legend()
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()

# –ó–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ 40-–π
orders_after_40 = webinar_time[webinar_time['duration_min'] >= 40]['made_order'].sum()
total_orders = webinar_time['made_order'].sum()
share_after_40 = orders_after_40 / total_orders * 100 if total_orders > 0 else 0

# ===== –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –í–´–í–û–î–ê =====
seg_ended = behavior_summary.loc['–î–æ—Å–∏–¥–µ–ª –¥–æ –∫–æ–Ω—Ü–∞ (40+ –º–∏–Ω)']
seg_left_early = behavior_summary.loc['–£—à—ë–ª –¥–æ –æ—Ñ—Ñ–µ—Ä–∞ (<30 –º–∏–Ω)']
multi_yes = multi_summary[multi_summary['multi_attempt'] == True].iloc[0]
multi_no = multi_summary[multi_summary['multi_attempt'] == False].iloc[0]

# ===== –í–´–í–û–î–´ =====
print("\n=== –í–´–í–û–î–´ ===\n")

print(f"""
üìå üìà –°–µ–≥–º–µ–Ω—Ç ¬´–î–æ—Å–∏–¥–µ–ª –¥–æ –∫–æ–Ω—Ü–∞ (40+ –º–∏–Ω)¬ª:
   ‚Ä¢ –†–∞–∑–º–µ—Ä: {seg_ended['percent_of_total']}% –∞—É–¥–∏—Ç–æ—Ä–∏–∏
   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {seg_ended['conversion (%)']}%

üìå ‚è± –°–µ–≥–º–µ–Ω—Ç ¬´–£—à—ë–ª –¥–æ 30-–π –º–∏–Ω—É—Ç—ã¬ª:
   ‚Ä¢ –†–∞–∑–º–µ—Ä: {seg_left_early['percent_of_total']}%
   ‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {seg_left_early['conversion (%)']}%

üìå üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
   ‚Ä¢ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ: {multi_no['Users']} ‚Äî –∫–æ–Ω–≤–µ—Ä—Å–∏—è {multi_no['conversion (%)']}%
   ‚Ä¢ –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ: {multi_yes['Users']} ‚Äî –∫–æ–Ω–≤–µ—Ä—Å–∏—è {multi_yes['conversion (%)']}% (–≤ ~{round(multi_yes['conversion (%)'] / max(multi_no['conversion (%)'],1), 1)} —Ä–∞–∑–∞ –≤—ã—à–µ)

üìâ –ö 40-–π –º–∏–Ω—É—Ç–µ —É—Ö–æ–¥–∏—Ç ‚âà {dropoff_40:.1f}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üìä –ò–∑ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: {orders_after_40} –∏–∑ {total_orders} (‚âà{share_after_40:.1f}%) –ø—Ä–∏—à–ª–∏—Å—å –Ω–∞ –ø–µ—Ä–∏–æ–¥ –ø–æ—Å–ª–µ 40-–π –º–∏–Ω—É—Ç—ã
""")

print("\n=== –ì–ò–ü–û–¢–ï–ó–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===\n")

print(f"""
üß© –ì–∏–ø–æ—Ç–µ–∑—ã:
‚ñ∂ –ù–∞ 40-–π –º–∏–Ω—É—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ñ—Ñ–µ—Ä ‚Äî —Ä–æ—Å—Ç –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —ç—Ç–æ–π —Ç–æ—á–∫–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç.
‚ñ∂ –û–¥–Ω–∞–∫–æ ~{dropoff_40:.1f}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Ö–æ–¥—è—Ç —Ä–∞–Ω—å—à–µ ‚Äî –Ω–µ —Å–ª—ã—à–∞—Ç –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.
‚ñ∂ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–∞, –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ 2‚Äì3 —Ä–∞–∑–∞ –≤—ã—à–µ –æ–±—ã—á–Ω–æ–π.

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –û–∑–≤—É—á–∏—Ç—å ¬´—Ç–∏–∑–µ—Ä –æ—Ñ—Ñ–µ—Ä–∞¬ª —É–∂–µ –Ω–∞ 15‚Äì20 –º–∏–Ω—É—Ç–µ.
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ 25‚Äì30 –º–∏–Ω—É—Ç–µ.
‚Ä¢ –î–æ—Å–∏–¥–µ–≤—à–∏–º 30+ –º–∏–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–æ–Ω—É—Å.
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–∏–∫–æ–≤ ‚Äî –æ—Ç–ª–æ–≤–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.
‚Ä¢ –£—à–µ–¥—à–∏—Ö –¥–æ 10-–π ‚Äî —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–æ–π —á–µ—Ä–µ–∑ TG/email.
""")